{"version":3,"sources":["components/ToDoListItem.js","actions/note.js","components/ToDoList.js","components/ToDo.js","reducer/noteReducer.js","index.js","store/ConfigureStore.js"],"names":["connect","text","id","dispatch","type","className","onChange","e","updates","editNote","target","value","console","log","length","onClick","deleteNote","state","notes","props","map","note","key","ToDoApp","onSubmit","preventDefault","uuidv4","addNote","setState","error","onInputChange","this","autoFocus","placeholder","React","Component","noteReducerDefaultState","localStorage","getItem","JSON","parse","action","filter","store","createStore","noteReducer","subscribe","setItem","stringify","getState","jsx","ToDo","ReactDOM","render","document","getElementById"],"mappings":"gRA8BeA,iBAxBM,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAQ9B,OACI,6BACI,2BAAOC,KAAK,aACZ,2BACIC,UAAU,aACVC,SAXK,SAACC,GACdJ,ECMgB,SAACD,EAAIM,GAAL,MAAkB,CACtCJ,KAAM,OACNF,KACAM,WDTaC,CAASP,EAAI,CAAED,KAAMM,EAAEG,OAAOC,SACvCC,QAAQC,IAAIN,EAAEG,OAAOC,MAAMG,SAUnBH,MAAOV,IAEX,4BACIc,QAAS,SAACR,GAAQJ,ECbR,SAACD,GAAD,MAAS,CAC/BE,KAAM,SACNF,MDWuCc,CAAWd,MAD1C,cEDGF,eANS,SAACiB,GACrB,MAAO,CACHC,MAAOD,KAIAjB,EAfE,SAACmB,GAAD,OACb,6BACKA,EAAMD,MAAME,KAAI,SAACC,GACd,OAAO,kBAAC,EAAD,eAAcC,IAAKD,EAAKnB,IAAOmB,WCJ5CE,E,kDACF,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IAOVK,SAAW,SAACjB,GACRA,EAAEkB,iBACF,IAAMxB,EAAO,EAAKgB,MAAMI,KACnB,EAAKJ,MAAMI,MAGZ,EAAKF,MAAMhB,SFlBA,wEAAiB,GAAjB,IAAGF,YAAH,MAAU,GAAV,QAAyB,CAC5CG,KAAM,MACNiB,KAAM,CACFpB,OACAC,GAAIwB,gBEcoBC,CAAQ,CAAE1B,UAC9B,EAAK2B,UAAS,iBAAO,CAAEP,KAAM,GAAIQ,MAAO,QAHxC,EAAKD,UAAS,iBAAO,CAAEC,MAAO,kCAZnB,EAmBnBC,cAAgB,SAACvB,GACb,IAAMc,EAAOd,EAAEG,OAAOC,MACtB,EAAKiB,UAAS,iBAAO,CAAEP,YAnBvB,EAAKJ,MAAQ,CACTI,KAAM,GACNQ,MAAO,IAJI,E,qDAyBf,OACI,yBAAKxB,UAAU,QACX,0BAAMmB,SAAUO,KAAKP,UACjB,6CACCO,KAAKd,MAAMY,OAAS,uBAAGxB,UAAU,SAAS0B,KAAKd,MAAMY,OACtD,2BAAOG,WAAS,EAACrB,MAAOoB,KAAKd,MAAMI,KAAMhB,UAAU,eAAeC,SAAUyB,KAAKD,cAAeG,YAAY,wBAC5G,6CAEJ,kBAAC,EAAD,W,GAlCMC,IAAMC,WAwCbnC,gBAAUuB,G,uBCxCnBa,EALiBC,aAAaC,QAAQ,cACtCC,KAAKC,MAAMH,aAAaC,QAAQ,eAChC,GAKU,aAA8C,IAA7CrB,EAA4C,uDAApCmB,EAAyBK,EAAW,uCACzD,OAAQA,EAAOrC,MACX,IAAK,MACD,MAAM,GAAN,mBAAWa,GAAX,CAAkBwB,EAAOpB,OAC7B,IAAK,SACD,OAAOJ,EAAMyB,QAAO,SAACrB,GAAD,OAAUA,EAAKnB,KAAOuC,EAAOvC,MACrD,QACI,OAAOe,EAEX,IAAK,OACD,OAAOA,EAAMG,KAAI,SAACC,GACd,OAAIA,EAAKnB,KAAOuC,EAAOvC,GACZ,eAAKmB,EAAZ,GAAqBoB,EAAOjC,SAErBa,OCbrBsB,G,MCDYC,YAAYC,IDQ9BF,EAAMG,WAAU,WACZT,aAAaU,QAAQ,aAAcR,KAAKS,UAAUL,EAAMM,gBAI5D,IAAMC,EACF,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAACQ,EAAD,OAIRC,IAASC,OAAOH,EAAKI,SAASC,eAAe,W","file":"static/js/main.ebbc89b8.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { editNote, deleteNote } from \"../actions/note\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nconst ToDoListItem = ({ text, id, dispatch }) => {\r\n\r\n    const onChange = (e) => {\r\n        dispatch(editNote(id, { text: e.target.value }))\r\n        console.log(e.target.value.length);\r\n    }\r\n\r\n\r\n    return (\r\n        <div >\r\n            <input type=\"checkbox\" />\r\n            <input\r\n                className=\"inputClass\"\r\n                onChange={onChange}\r\n                value={text}\r\n            />\r\n            <button\r\n                onClick={(e) => { dispatch(deleteNote(id)) }}  >\r\n                Delete\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(ToDoListItem);","import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const addNote = ({ text = \"\" } = {}) => ({\r\n    type: \"ADD\",\r\n    note: {\r\n        text,\r\n        id: uuidv4()\r\n    }\r\n})\r\n\r\nexport const deleteNote = (id) => ({\r\n    type: \"DELETE\",\r\n    id\r\n})\r\n\r\nexport const editNote = (id, updates) => ({\r\n    type: \"EDIT\",\r\n    id,\r\n    updates\r\n})","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ToDoListItem from \"./ToDoListItem\"\r\n\r\n\r\n\r\nconst ToDoList = (props) => (\r\n    <div>\r\n        {props.notes.map((note) => {\r\n            return <ToDoListItem key={note.id}{...note} />\r\n        })}\r\n    </div>\r\n)\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        notes: state\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ToDoList)","import React from \"react\";\r\nimport { addNote } from \"../actions/note\";\r\nimport ToDoList from \"../components/ToDoList\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ToDoApp extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            note: \"\",\r\n            error: \"\"\r\n        }\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const text = this.state.note;\r\n        if (!this.state.note) {\r\n            this.setState(() => ({ error: \"Blank item cannot be added\" }))\r\n        } else {\r\n            this.props.dispatch(addNote({ text }));\r\n            this.setState(() => ({ note: \"\", error: \"\" }))\r\n        }\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        const note = e.target.value;\r\n        this.setState(() => ({ note }))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <form onSubmit={this.onSubmit}>\r\n                    <h2>ToDo Task App</h2>\r\n                    {this.state.error && <p className=\"error\">{this.state.error}</p>}\r\n                    <input autoFocus value={this.state.note} className=\"inputNewItem\" onChange={this.onInputChange} placeholder=\"Add your To do item\" />\r\n                    <button>Add Item</button>\r\n                </form>\r\n                <ToDoList />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect()(ToDoApp);\r\n","const persistedState = localStorage.getItem('reduxState')\r\n    ? JSON.parse(localStorage.getItem('reduxState'))\r\n    : []\r\n\r\n\r\nconst noteReducerDefaultState = persistedState;\r\n\r\nexport default ((state = noteReducerDefaultState, action) => {\r\n    switch (action.type) {\r\n        case \"ADD\":\r\n            return [...state, action.note]\r\n        case \"DELETE\":\r\n            return state.filter((note) => note.id !== action.id)\r\n        default:\r\n            return state\r\n\r\n        case \"EDIT\":\r\n            return state.map((note) => {\r\n                if (note.id === action.id) {\r\n                    return { ...note, ...action.updates }\r\n                } else\r\n                    return note;\r\n            })\r\n    }\r\n})\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ToDoApp from \"./components/ToDo\";\r\nimport { Provider } from \"react-redux\";\r\nimport ConfigureStore from \"./store/ConfigureStore\";\r\nimport { addNote, deleteNote, editNote } from \"./actions/note\";\r\nimport \"./style.css\"\r\n\r\nconst store = ConfigureStore();\r\n// // const one = store.dispatch(addNote({ text: \"This is my first note\" }));\r\n// // const two = store.dispatch(addNote({ text: \"This is my second note\" }));\r\n\r\n\r\n// store.dispatch(editNote(one.note.id, { text: \"You are awesome \" }))\r\n\r\nstore.subscribe(()=>{\r\n    localStorage.setItem('reduxState', JSON.stringify(store.getState()))\r\n  })\r\n\r\n\r\nconst jsx = (\r\n    <Provider store={store}>\r\n        <ToDoApp/>\r\n    </Provider>\r\n)\r\n\r\nReactDOM.render(jsx, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { createStore } from \"redux\";\r\nimport noteReducer from \"../reducer/noteReducer\"\r\n\r\n\r\n\r\n\r\nexport default () => {\r\n    const store = createStore(noteReducer);\r\n    return store;\r\n\r\n}\r\n"],"sourceRoot":""}